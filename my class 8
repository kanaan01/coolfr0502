#include<iostream>
#include<string>
using namespace std;
class Garage
{
int length;
int maxSize;
int * carsList;
public:
Garage(int maxSize = 100)
{
if(maxSize <= 0 )
this->maxSize = 100;
else
this->maxSize = maxSize;
carsList = new int[this->maxSize];
length =0;
}
Garage(const Garage & o)
{
maxSize = o.maxSize;
length = o.length;
carsList = new int[maxSize];
for (int i =0; i<o.length; i++)
carsList[i] = o.carsList[i];
}
~Garage()
{
delete [] carsList;
// any thing build dynamicly must be deleted in the destructor.
}
bool isEmpty()
{
return length == 0;
}
bool isFull()
{
return length == maxSize;
}
int getLength()
{
return length;
}
int getmaxSize()
{
return maxSize;
}
void insert(int g)
{
if(!isFull())
{
carsList[length] = g;
length++;
}
else
cout<<"sorry you reach the max capacity."<<endl;
}
void insertAt(int g, int position)
{
if(position <0 || position > length)
cout<<"out of range position"<<endl;
else
{
if(!isFull())
{
for(int i = length; i>position; i--)
{
carsList[i] = carsList[i-1];
}
carsList[position] = g;
length++;
}
else
cout<<"sorry you reach the max capacity."<<endl;
}
}
void printAll()
{
if(!isEmpty())
for (int i =0; i<length; i++)
cout<<carsList[i]<<" ";
cout<<endl;
}
int retrieve(int index)
{
if(isEmpty())
return -1;
else
if(index <0 || index >(length-1))
return -1;
else
return carsList[index];
}
void remove(int value)
{
bool find = false;
 if(isEmpty())
cout<<"the list is empty"<<endl;
else
{
for(int i =0; i<length ; i++)
if(carsList[i] == value)
{
find = true;
//cout<<"Yes"<<endl;
for(int j = i; j<length-1; j++)
carsList[j] = carsList[j+1];
length --;
break;
}
if(find == false)
cout<<"cannt find the car"<<endl;
}
}
bool isEqualAVG(Garage & obj)
{
double sum1 = 0, sum2 = 0;
for(int i = 0; i<length; i++)
sum1 += carsList[i];
for(int i = 0; i<obj.length; i++)
sum2 += obj.carsList[i];
double avg1 = sum1 / length;
double avg2 = sum2 / obj.length;
if(avg1 == avg2)
return true;
else
return false;
}
};
Garage Merge(Garage & r1, Garage & r2)
{
if(r1.getLength() + r2.getLength() <= r1.getmaxSize())
{
Garage g3;
for(int i =0; i<r1.getLength(); i++)
g3.insert(r1.retrieve(i));
for(int i =0; i<r2.getLength(); i++)
g3.insert(r2.retrieve(i));
return g3;
}
else
return r1;
}
int main()
{
Garage g1, g2;
int v;
for (int i =0; i<5; i++)
{
cin>>v;
g1.insert(v);
}
for (int i =0; i<5; i++)
{
cin>>v;
g2.insert(v);
}
int p1, p2, p3;
cin>>p1>>p2>>p3;
cout<<"the carsList of first garage are :"<<endl;
g1.printAll();
cout<<"the carsList of second garage are :"<<endl;
g2.printAll();
g1.insertAt(p1, p2-1);
cout<<"the carsList of first garage after inserting new value are :"<<endl;
g1.printAll();
g2.remove(p3);
cout<<"the carsList of second garage after removing one value are :"<<endl;
g2.printAll();
bool a = g1.isEqualAVG (g2);
if(a)
cout<<"the average of the cars in the two garages is equal"<<endl;
else
cout<<"the average of the cars in the two garages is not equal"<<endl;
Garage g3 = Merge(g1, g2);
cout<<"the carsList after merging the two garages are:"<<endl;
g3.printAll();
 return 0;
}
